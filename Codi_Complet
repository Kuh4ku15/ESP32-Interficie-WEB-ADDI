
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define LED_PIN 18  // ESP32 pin GPIO18 conectado al LED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const char *ssid = "AP_asix";
const char *password = "AP_asix2023";

AsyncWebServer server(80);

int LED_state = LOW;
bool pampalluga_active = false;

// Logo definido como un array de bytes
const unsigned char logo [] PROGMEM = {
0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x58, 0x00, 0x00, 0x00,
  0x00, 0x05, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA7, 0xFF, 0x6B, 0x9C,
  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0xD2, 0xFB,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x48,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x70,
  0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x80,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xFF, 0x1A, 0x00,
  0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xFF, 0xF8, 0x00,
  0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xE0, 0x00, 0x00,
  0x00, 0x28, 0x01, 0x80, 0xF0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x70, 0x00, 0x00,
  0x00, 0x28, 0x00, 0xE0, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xF0, 0x00, 0x00,
  0x00, 0x28, 0x01, 0xC0, 0xF0, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xAA, 0x80, 0x00,
  0x00, 0x28, 0x01, 0x20, 0x90, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xB0, 0x80, 0x00,
  0x00, 0x28, 0x01, 0xA0, 0x60, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xD0, 0x40, 0x00,
  0x00, 0x28, 0x00, 0x00, 0xD0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x60, 0x40, 0x00,
  0x00, 0x28, 0x01, 0x60, 0xA0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xB0, 0x80, 0x00,
  0x00, 0x28, 0x01, 0x60, 0x60, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xB0, 0xC0, 0x00,
  0x00, 0x10, 0x01, 0x40, 0x70, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xC0, 0x40, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0xB0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x70, 0x40, 0x00,
  0x00, 0x30, 0x01, 0x20, 0x70, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x40, 0x80, 0x00,
  0x00, 0x00, 0x00, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xF6, 0x40, 0x00,
  0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9E, 0xC0, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xB0, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0xD0, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD9, 0xD2, 0x8E, 0x6E, 0xAE, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x7B, 0xF7, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x91, 0xA5, 0x9A, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xA9, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x03, 0x81, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x74, 0x00, 0x00, 0x00, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xD8, 0x00, 0x00, 0x00, 0xC0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x00, 0x00, 0x11, 0x40, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x00, 0x00, 0xAF, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x00, 0x0F, 0xDC, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x08, 0x00, 0x10, 0x4F, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0D, 0xFF, 0xD7, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0F, 0xFF, 0x3E, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x04, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x04, 0x00, 0x38, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x00, 0x30, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x03, 0xFF, 0x1C, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x06, 0xFF, 0x66, 0x01, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x08, 0x00, 0x17, 0xF2, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x00, 0x07, 0xCF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x04, 0x00, 0x02, 0x7E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x0C, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Generar HTML para la página web
String getHTML() {
    String html = "<!DOCTYPE HTML>";
    html += "<html>";
    html += "<head>";
    html += "<link rel='icon' href='data:,'>";
    html += "<style>";
    html += "body { font-family: Arial; text-align: center; margin: 20px; }";
    html += ".button { padding: 10px 20px; margin: 10px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; }";
    html += ".on { background-color: green; color: white; }";
    html += ".off { background-color: red; color: white; }";
    html += "</style>";
    html += "</head>";
    html += "<body>";
    html += "<h1>Control del LED</h1>";
    html += "<p>Estado del LED: ";
    html += "<span style='color: " + String(LED_state == HIGH ? "green" : "red") + ";'>";
    html += LED_state == HIGH ? "ENCENDIDO" : "APAGADO";
    html += "</span>";
    html += "</p>";
    html += "<p>Modo Parpadeo: ";
    html += "<span style='color: " + String(pampalluga_active ? "blue" : "gray") + ";'>";
    html += pampalluga_active ? "ACTIVADO" : "DESACTIVADO";
    html += "</span>";
    html += "</p>";
    html += "<a href='/led1/on'><button class='button on'>Encender</button></a>";
    html += "<a href='/led1/off'><button class='button off'>Apagar</button></a>";
    html += "<br>";
    html += "<a href='/led1/pampalluga'><button class='button pampalluga'>";
    html += pampalluga_active ? "Pampalluga (Activado)" : "Pampalluga";
    html += "</button></a>";
    html += "<br>";
    html += "<a href='/logo'><button class='button on'>Mostrar Logo</button></a>";
    html += "<a href='/remove_logo'><button class='button off'>Quitar Logo</button></a>";
    html += "</body>";
    html += "</html>";

    return html;
}

void setup() {
    Serial.begin(115200);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LED_state);

    // Configura la comunicación I2C
    Wire.begin(21, 22); // Pines SDA = 21, SCL = 22

    // Inicializa la pantalla OLED con la dirección I2C 0x3C
    if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("No se puede iniciar la pantalla OLED SSD1306"));
        while (1);
    }

    oled.clearDisplay();
    oled.setTextSize(1);
    oled.setCursor(0, 0);
    oled.setTextColor(WHITE);

    // Conectar al Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        oled.println("Conectando al WiFi...");
        oled.display();
    }
    oled.println("Conectado al WiFi");
    delay(500);
    oled.display();

    // Imprimir la dirección IP del ESP32
    oled.print("ESP32 -> ");
    oled.println(WiFi.localIP());
    oled.display();

    // Página principal
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /)");
        request->send(200, "text/html", getHTML());
    });

    // Ruta para encender el LED
    server.on("/led1/on", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /led1/on)");
        LED_state = HIGH;
        pampalluga_active = false;
        digitalWrite(LED_PIN, LED_state);
        request->send(200, "text/html", getHTML());
    });

    // Ruta para apagar el LED
    server.on("/led1/off", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /led1/off)");
        LED_state = LOW;
        pampalluga_active = false;
        digitalWrite(LED_PIN, LED_state);
        request->send(200, "text/html", getHTML());
    });

    // Ruta para hacer que el LED parpadee
    server.on("/led1/pampalluga", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /led1/pampalluga)");
        pampalluga_active = true;
        request->send(200, "text/html", getHTML());
    });

    // Ruta para mostrar el logo
    server.on("/logo", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /logo)");
        oled.clearDisplay();
        oled.drawBitmap(0, 0, logo, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
        oled.display();
        request->send(200, "text/html", getHTML());
    });

    // Ruta para quitar el logo
    server.on("/remove_logo", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /remove_logo)");
        oled.clearDisplay();
        oled.display();
        request->send(200, "text/html", getHTML());
    });

    // Iniciar el servidor
    server.begin();
}

void loop() {
    // Alterna el estado del LED si pampalluga está activo
    static unsigned long lastBlinkTime = 0;
    if (pampalluga_active && millis() - lastBlinkTime > 1000) {
        lastBlinkTime = millis();
        LED_state = !LED_state;
        digitalWrite(LED_PIN, LED_state);
    }

    // Aquí puedes añadir tareas adicionales si es necesario
}
