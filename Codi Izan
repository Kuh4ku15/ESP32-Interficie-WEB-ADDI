#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define LED_PIN 18  // ESP32 pin GPIO18 conectado al LED

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const char *ssid = "AP_asix";
const char *password = "AP_asix2023";

AsyncWebServer server(80);

int LED_state = LOW;
bool pampalluga_active = false;

// Generar HTML para la página web
String getHTML() {
    String html = "<!DOCTYPE HTML>";
    html += "<html>";
    html += "<head>";
    html += "<link rel='icon' href='data:,'>";
    html += "<style>";
    html += "body { font-family: Arial; text-align: center; margin: 20px; }";
    html += ".button { padding: 10px 20px; margin: 10px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; }";
    html += ".on { background-color: green; color: white; }";
    html += ".off { background-color: red; color: white; }";
    html += ".pampalluga { background-color: blue; color: white; }";
    html += "</style>";
    html += "</head>";
    html += "<body>";
    html += "<h1>Control del LED</h1>";
    html += "<p>Estado del LED: ";
    html += "<span style='color: " + String(LED_state == HIGH ? "green" : "red") + ";'>";
    html += LED_state == HIGH ? "ENCENDIDO" : "APAGADO";
    html += "</span>";
    html += "</p>";
    html += "<p>Modo Parpadeo: ";
    html += "<span style='color: " + String(pampalluga_active ? "blue" : "gray") + ";'>";
    html += pampalluga_active ? "ACTIVADO" : "DESACTIVADO";
    html += "</span>";
    html += "</p>";
    html += "<a href='/led1/on'><button class='button on'>Encender</button></a>";
    html += "<a href='/led1/off'><button class='button off'>Apagar</button></a>";
    html += "<br>";
    html += "<a href='/led1/pampalluga'><button class='button pampalluga'>";
    html += pampalluga_active ? "Pampalluga (Activado)" : "Pampalluga";
    html += "</button></a>";
    html += "</body>";
    html += "</html>";

    return html;
}

void setup() {
    Serial.begin(115200);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LED_state);

    // Configura la comunicación I2C
    Wire.begin(21, 22); // Pines SDA = 21, SCL = 22

    // Inicializa la pantalla OLED con la dirección I2C 0x3C
    if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println(F("No se puede iniciar la pantalla OLED SSD1306"));
        while (1);
    }

    oled.clearDisplay();
    oled.setTextSize(1);
    oled.setCursor(0, 0);
    oled.setTextColor(WHITE);

    // Conectar al Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        oled.println("Conectando al WiFi...");
        oled.display();
    }
    oled.println("Conectado al WiFi");
    delay(500);
    oled.display();

    // Imprimir la dirección IP del ESP32
    oled.print("ESP32 -> ");
    oled.println(WiFi.localIP());
    oled.display();

    // Página principal
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /)");
        request->send(200, "text/html", getHTML());
    });

    // Ruta para encender el LED
    server.on("/led1/on", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /led1/on)");
        LED_state = HIGH;
        pampalluga_active = false;
        digitalWrite(LED_PIN, LED_state);
        request->send(200, "text/html", getHTML());
    });

    // Ruta para apagar el LED
    server.on("/led1/off", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /led1/off)");
        LED_state = LOW;
        pampalluga_active = false;
        digitalWrite(LED_PIN, LED_state);
        request->send(200, "text/html", getHTML());
    });

    // Ruta para hacer que el LED parpadee
    server.on("/led1/pampalluga", HTTP_GET, [](AsyncWebServerRequest *request) {
        Serial.println("ESP32 Web Server: Nueva solicitud recibida (GET /led1/pampalluga)");
        pampalluga_active = true;
        request->send(200, "text/html", getHTML());
    });

    // Iniciar el servidor
    server.begin();
}

void loop() {
    // Alterna el estado del LED si pampalluga está activo
    static unsigned long lastBlinkTime = 0;
    if (pampalluga_active && millis() - lastBlinkTime > 1000) {
        lastBlinkTime = millis();
        LED_state = !LED_state;
        digitalWrite(LED_PIN, LED_state);
    }

    // Aquí puedes añadir tareas adicionales si es necesario
}
